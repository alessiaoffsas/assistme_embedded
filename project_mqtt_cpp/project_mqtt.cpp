#define DAC_PIN 25 // define pin 25 as the DAC
#define PMOS_V_RED 12 // define pin 12 as the voltage on Gate
#define PMOS_V_IR 13 // define pin 13 as the voltage on Gate
#define ADC_PIN 32 

#include "SampleFilter.h"
#include <WiFi.h>
#include <PubSubClient.h>

// Wifi
const char* ssid = "xxxx";       // Wi-Fi name
const char* password = "xxxx";   // Wi-Fi password
const int Tclk = 100; //ms --> Fclk = 10Hz

// MQTT Broker
const char* mqtt_server = "xxxx";
const int mqtt_port = 1883;
const char* sub_redBtn = "esp32/start_red";
const char* sub_irBtn = "esp32/start_ir";
const char* pub_red = "esp32/filtered_red";
const char* pub_ir = "esp32/filtered_ir";
/*const char *mqtt_username = "emqx";
const char *mqtt_password = "public";*/


WiFiClient espClient;
PubSubClient client(espClient);

static double filter_taps[SAMPLEFILTER_TAP_NUM] = {
  3.7177887745732367e-11,
  3.0298588297903303e-10,
  5.327798756703555e-10,
  1.0096250339150059e-9,
  1.751180039270429e-9,
  2.8835805560993782e-9,
  4.559131321668629e-9,
  6.978700565886136e-9,
  1.040088868849222e-8,
  1.5155458887555287e-8,
  2.165861427263038e-8,
  3.043084149503434e-8,
  4.211762618927019e-8,
  5.751306843982705e-8,
  7.758711083934127e-8,
  1.0351622460762201e-7,
  1.367182547648251e-7,
  1.7889145862298067e-7,
  2.3205822110196927e-7,
  2.9861355130671245e-7,
  3.81378862739104e-7,
  4.836610204138151e-7,
  6.093170735302437e-7,
  7.628247547393263e-7,
  9.493588240595573e-7,
  0.0000011748734301494835,
  0.0000014461904175731903,
  0.0000017710934863499849,
  0.0000021584280635569777,
  0.0000026182066525132335,
  0.000003161719168924392,
  0.0000038016479420612737,
  0.0000045521866438631,
  0.0000054291624055684704,
  0.000006450160260739055,
  0.000007634648867426249,
  0.000009004106225172098,
  0.000010582144099694702,
  0.000012394629603248899,
  0.000014469802152649417,
  0.000016838383971217462,
  0.000019533682082657615,
  0.000022591679572742234,
  0.00002605111371249624,
  0.000029953538480827747,
  0.00003434336878557374,
  0.000039267903590003244,
  0.00004477732507088619,
  0.00005092467089985814,
  0.00005776577656362194,
  0.00006535918467450412,
  0.00007376601827665214,
  0.00008304981512873659,
  0.00009327632002207258,
  0.0001045132323619191,
  0.0001168299063714055,
  0.00013029700143937502,
  0.00014498608047327583,
  0.00016096915440256954,
  0.00017831817132213018,
  0.00019710444914257199,
  0.00021739805112314925,
  0.00023926710418713048,
  0.000262777060478291,
  0.00028798990317725813,
  0.000314963298308859,
  0.0003437496949983158,
  0.00037439537733828835,
  0.0004069394718085423,
  0.0004414129150394969,
  0.00047783738751565054,
  0.0005162242196418922,
  0.0005565732775164364,
  0.0005988718365999017,
  0.0006430934522713508,
  0.0006891968371010577,
  0.0007371247555400469,
  0.0007868029474493033,
  0.0008381390925769187,
  0.0008910218287343511,
  0.0009453198370458503,
  0.0010008810081147208,
  0.0010575317033412947,
  0.0011150761258696372,
  0.00117329581581759,
  0.001231949284513555,
  0.0012907718023574884,
  0.0013494753545838984,
  0.0014077487788055336,
  0.0014652580977404619,
  0.0015216470596968747,
  0.0015765378984229385,
  0.0016295323228673903,
  0.0016802127461932248,
  0.0017281437618415127,
  0.0017728738728388744,
  0.0018139374787153135,
  0.001850857122540591,
  0.0018831459984252625,
  0.0019103107175179755,
  0.0019318543282102227,
  0.0019472795838480455,
  0.001956092448533313,
  0.0019578058289101276,
  0.0019519435173124809,
  0.0019380443287443855,
  0.001915666411384663,
  0.0018843917075981374,
  0.0018438305398998554,
  0.0017936262934704237,
  0.0017334601643761573,
  0.001663055940308511,
  0.0015821847785145323,
  0.0014906699433214503,
  0.0013883914640100022,
  0.0012752906723735092,
  0.0011513745776817823,
  0.0010167200359990772,
  0.0008714776702407015,
  0.0007158754969337102,
  0.0005502222154693236,
  0.0003749101167634106,
  0.00019041756837864823,
  -0.0000026889651844068586,
  -0.0002037534066300721,
  -0.0004120290920104009,
  -0.0006266783740847182,
  -0.0008467728346636773,
  -0.00107129413476174,
  -0.0012991355277935344,
  -0.0015291040558091124,
  -0.001759923446309341,
  -0.001990237719465577,
  -0.002218615514085941,
  -0.0024435551306413693,
  -0.002663490289981861,
  -0.0028767965931324963,
  -0.003081798669928269,
  -0.003276777990204361,
  -0.003459981311030438,
  -0.0036296297250264973,
  -0.0037839282672778164,
  -0.003921076036414159,
  -0.004039276775589552,
  -0.004136749855656405,
  -0.004211741597912792,
  -0.004262536867797668,
  -0.004287470866092103,
  -0.0042849410426950285,
  -0.0042534190511750135,
  -0.0041914626611785355,
  -0.0040977275435678156,
  -0.003970978840616981,
  -0.003810102432131351,
  -0.0036141158091897644,
  -0.003382178466820981,
  -0.0031136017274364957,
  -0.0028078579092838465,
  -0.002464588756729455,
  -0.00208361305217679,
  -0.0016649333330402483,
  -0.0012087416425334053,
  -0.0007154242483406989,
  -0.00018556526906252175,
  0.0003800508451699895,
  0.0009804380237435728,
  0.0016144085164350817,
  0.002280574094115661,
  0.002977348530612678,
  0.003702951377902087,
  0.004455413037303544,
  0.005232581119898677,
  0.006032128079815951,
  0.00685156009424911,
  0.007688227154148779,
  0.008539334320080385,
  0.009401954088298062,
  0.010273039803028102,
  0.011149440042153154,
  0.012027913895106648,
  0.012905147043924106,
  0.013777768551309475,
  0.014642368253010626,
  0.015495514645900902,
  0.01633377315813125,
  0.017153724683464176,
  0.017951984258582993,
  0.018725219759763927,
  0.01947017049386717,
  0.020183665557996715,
  0.020862641842660113,
  0.02150416155475099,
  0.022105429139161574,
  0.022663807481172586,
  0.023176833276153223,
  0.023642231458392986,
  0.02405792858699906,
  0.02442206509378131,
  0.02473300630588084,
  0.02498935216436642,
  0.02518994556910491,
  0.02533387928995557,
  0.02542050139453483,
  0.025449419153409925,
  0.02542050139453483,
  0.02533387928995557,
  0.02518994556910491,
  0.02498935216436642,
  0.02473300630588084,
  0.02442206509378131,
  0.02405792858699906,
  0.023642231458392986,
  0.023176833276153223,
  0.022663807481172586,
  0.022105429139161574,
  0.02150416155475099,
  0.020862641842660113,
  0.020183665557996715,
  0.01947017049386717,
  0.018725219759763927,
  0.017951984258582993,
  0.017153724683464176,
  0.01633377315813125,
  0.015495514645900902,
  0.014642368253010626,
  0.013777768551309475,
  0.012905147043924106,
  0.012027913895106648,
  0.011149440042153154,
  0.010273039803028102,
  0.009401954088298062,
  0.008539334320080385,
  0.007688227154148779,
  0.00685156009424911,
  0.006032128079815951,
  0.005232581119898677,
  0.004455413037303544,
  0.003702951377902087,
  0.002977348530612678,
  0.002280574094115661,
  0.0016144085164350817,
  0.0009804380237435728,
  0.0003800508451699895,
  -0.00018556526906252175,
  -0.0007154242483406989,
  -0.0012087416425334053,
  -0.0016649333330402483,
  -0.00208361305217679,
  -0.002464588756729455,
  -0.0028078579092838465,
  -0.0031136017274364957,
  -0.003382178466820981,
  -0.0036141158091897644,
  -0.003810102432131351,
  -0.003970978840616981,
  -0.0040977275435678156,
  -0.0041914626611785355,
  -0.0042534190511750135,
  -0.0042849410426950285,
  -0.004287470866092103,
  -0.004262536867797668,
  -0.004211741597912792,
  -0.004136749855656405,
  -0.004039276775589552,
  -0.003921076036414159,
  -0.0037839282672778164,
  -0.0036296297250264973,
  -0.003459981311030438,
  -0.003276777990204361,
  -0.003081798669928269,
  -0.0028767965931324963,
  -0.002663490289981861,
  -0.0024435551306413693,
  -0.002218615514085941,
  -0.001990237719465577,
  -0.001759923446309341,
  -0.0015291040558091124,
  -0.0012991355277935344,
  -0.00107129413476174,
  -0.0008467728346636773,
  -0.0006266783740847182,
  -0.0004120290920104009,
  -0.0002037534066300721,
  -0.0000026889651844068586,
  0.00019041756837864823,
  0.0003749101167634106,
  0.0005502222154693236,
  0.0007158754969337102,
  0.0008714776702407015,
  0.0010167200359990772,
  0.0011513745776817823,
  0.0012752906723735092,
  0.0013883914640100022,
  0.0014906699433214503,
  0.0015821847785145323,
  0.001663055940308511,
  0.0017334601643761573,
  0.0017936262934704237,
  0.0018438305398998554,
  0.0018843917075981374,
  0.001915666411384663,
  0.0019380443287443855,
  0.0019519435173124809,
  0.0019578058289101276,
  0.001956092448533313,
  0.0019472795838480455,
  0.0019318543282102227,
  0.0019103107175179755,
  0.0018831459984252625,
  0.001850857122540591,
  0.0018139374787153135,
  0.0017728738728388744,
  0.0017281437618415127,
  0.0016802127461932248,
  0.0016295323228673903,
  0.0015765378984229385,
  0.0015216470596968747,
  0.0014652580977404619,
  0.0014077487788055336,
  0.0013494753545838984,
  0.0012907718023574884,
  0.001231949284513555,
  0.00117329581581759,
  0.0011150761258696372,
  0.0010575317033412947,
  0.0010008810081147208,
  0.0009453198370458503,
  0.0008910218287343511,
  0.0008381390925769187,
  0.0007868029474493033,
  0.0007371247555400469,
  0.0006891968371010577,
  0.0006430934522713508,
  0.0005988718365999017,
  0.0005565732775164364,
  0.0005162242196418922,
  0.00047783738751565054,
  0.0004414129150394969,
  0.0004069394718085423,
  0.00037439537733828835,
  0.0003437496949983158,
  0.000314963298308859,
  0.00028798990317725813,
  0.000262777060478291,
  0.00023926710418713048,
  0.00021739805112314925,
  0.00019710444914257199,
  0.00017831817132213018,
  0.00016096915440256954,
  0.00014498608047327583,
  0.00013029700143937502,
  0.0001168299063714055,
  0.0001045132323619191,
  0.00009327632002207258,
  0.00008304981512873659,
  0.00007376601827665214,
  0.00006535918467450412,
  0.00005776577656362194,
  0.00005092467089985814,
  0.00004477732507088619,
  0.000039267903590003244,
  0.00003434336878557374,
  0.000029953538480827747,
  0.00002605111371249624,
  0.000022591679572742234,
  0.000019533682082657615,
  0.000016838383971217462,
  0.000014469802152649417,
  0.000012394629603248899,
  0.000010582144099694702,
  0.000009004106225172098,
  0.000007634648867426249,
  0.000006450160260739055,
  0.0000054291624055684704,
  0.0000045521866438631,
  0.0000038016479420612737,
  0.000003161719168924392,
  0.0000026182066525132335,
  0.0000021584280635569777,
  0.0000017710934863499849,
  0.0000014461904175731903,
  0.0000011748734301494835,
  9.493588240595573e-7,
  7.628247547393263e-7,
  6.093170735302437e-7,
  4.836610204138151e-7,
  3.81378862739104e-7,
  2.9861355130671245e-7,
  2.3205822110196927e-7,
  1.7889145862298067e-7,
  1.367182547648251e-7,
  1.0351622460762201e-7,
  7.758711083934127e-8,
  5.751306843982705e-8,
  4.211762618927019e-8,
  3.043084149503434e-8,
  2.165861427263038e-8,
  1.5155458887555287e-8,
  1.040088868849222e-8,
  6.978700565886136e-9,
  4.559131321668629e-9,
  2.8835805560993782e-9,
  1.751180039270429e-9,
  1.0096250339150059e-9,
  5.327798756703555e-10,
  3.0298588297903303e-10,
  3.7177887745732367e-11
};


void SampleFilter_init(SampleFilter* f) {
  int i;
  for(i = 0; i < SAMPLEFILTER_TAP_NUM; ++i)
    f->history[i] = 0;
  f->last_index = 0;
}

void SampleFilter_put(SampleFilter* f, double input) {
  f->history[f->last_index++] = input;
  if(f->last_index == SAMPLEFILTER_TAP_NUM)
    f->last_index = 0;
}

double SampleFilter_get(SampleFilter* f) {
  double acc = 0;
  int index = f->last_index, i;
  for(i = 0; i < SAMPLEFILTER_TAP_NUM; ++i) {
    index = index != 0 ? index-1 : SAMPLEFILTER_TAP_NUM-1;
    acc += f->history[index] * filter_taps[i];
  };
  return acc;
}

SampleFilter f;

void setup_wifi(){

  delay(10);

  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  // connect to a WiFi network
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void setup() {                
  // Set software serial baud to 115200;
  Serial.begin(115200);

  // Set pins modes
  dacWrite(DAC_PIN, 223);   
  pinMode(PMOS_V_RED, OUTPUT); 
  pinMode(PMOS_V_IR, OUTPUT); 
  analogReadResolution(12);

  //Start with LEDs OFF
  digitalWrite(PMOS_V_RED,HIGH);
  digitalWrite(PMOS_V_IR,HIGH);
  
  setup_wifi();

  // Wifi Setup
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  // Subscribe to buttons
  client.subscribe(sub_redBtn);
  client.subscribe(sub_redBtn);


  // Initialize filter
  SampleFilter_init(&f);
}

// Callback for subscribe
void callback(char *topic, byte *message, unsigned int length) {
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
     Serial.print((char) message[i]);
  }
  Serial.println();
  //Serial.println("-----------------------");

  if(String(topic) == sub_redBtn){
    //digitalWrite(PMOS_V_RED,LOW);  
  }
  
  double x = (double)analogRead(ADC_PIN)* 3.3 / 4095.0;
  SampleFilter_put(&f, x);
  double y = SampleFilter_get(&f);

  Serial.print(x); 
  Serial.print(" ");
  Serial.print(y);
  Serial.println();

  char filter_y[4];
  dtostrf(y, 1, 2, filter_y);
  // publish filtered signal to topic
  client.publish(pub_red, filter_y);

}
void loop() {
  
  client.loop();  
}
